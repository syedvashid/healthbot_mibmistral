from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict
from langchain_ollama import ChatOllama
from langchain.memory import ConversationBufferMemory
from langchain.prompts import (
    ChatPromptTemplate,
    HumanMessagePromptTemplate,
    SystemMessagePromptTemplate,
    PromptTemplate
)
from langchain.chains import LLMChain
import logging
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph
from reportlab.lib.styles import getSampleStyleSheet
from io import BytesIO
from fastapi.responses import StreamingResponse
import asyncio

# Setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

class ChatRequest(BaseModel):
    user_input: str
    conversation_history: List[Dict[str, str]] = []

class HistoryRequest(BaseModel):
    conversation_history: List[Dict[str, str]]

# Initialize Ollama
llm = ChatOllama(
    model="biomistral",
    temperature=0.7,
    max_tokens=200,
    timeout=30
)

# System Prompts
MEDICAL_PROMPT = """You are a medical assistant. Ask concise follow-up questions about symptoms. 
If the query is non-medical, respond: "I specialize only in health-related topics." Then ask a health question."""

DEPARTMENT_PROMPT = """Analyze this health conversation and suggest ONE most relevant medical department:
Cardiology, Neurology, General Medicine, Orthopedics, Dermatology, ENT, Psychiatry, Gynecology, Gastroenterology.

Conversation:
{conversation_history}

Return ONLY the department name."""

REPORT_PROMPT = """Generate a professional medical report:

**Patient Summary**
- Chief Complaint: {chief_complaint}

**Clinical History**
{history}

**Assessment**
- Symptom analysis
- Potential concerns

**Recommendations**
- Suggested next steps

Format this for doctor review. Be concise yet comprehensive.

Conversation:
{conversation_history}"""

# Core Chat Endpoint
@app.post("/chat")
async def chat(request: ChatRequest):
    try:
        memory = ConversationBufferMemory(memory_key="chat_history", return_messages=True)
        
        for msg in request.conversation_history:
            if msg["role"] == "user":
                memory.chat_memory.add_user_message(msg["content"])
            else:
                memory.chat_memory.add_ai_message(msg["content"])

        prompt = ChatPromptTemplate.from_messages([
            SystemMessagePromptTemplate.from_template(MEDICAL_PROMPT),
            HumanMessagePromptTemplate.from_template("{user_input}"),
        ])
        
        chain = LLMChain(llm=llm, prompt=prompt, memory=memory)
        response = await chain.arun(user_input=request.user_input)
        
        return {"response": response.strip()}

    except Exception as e:
        logger.error(f"Chat error: {str(e)}")
        raise HTTPException(500, "Chat processing failed")

# Department Suggestion
@app.post("/suggest_department")
async def suggest_department(request: HistoryRequest):
    try:
        conv_history = "\n".join(
            f"{msg['role'].upper()}: {msg['content']}" 
            for msg in request.conversation_history
        )
        
        prompt = PromptTemplate(
            input_variables=["conversation_history"],
            template=DEPARTMENT_PROMPT
        )
        chain = LLMChain(llm=llm, prompt=prompt)
        department = await chain.arun(conversation_history=conv_history)
        return {"department": department.strip()}
    
    except Exception as e:
        logger.error(f"Department error: {str(e)}")
        return {"department": "General Medicine"}

# PDF Report Generation
@app.post("/generate_report")
async def generate_report(request: HistoryRequest):
    try:
        # Extract chief complaint
        chief_complaint = next(
            (msg["content"] for msg in request.conversation_history 
             if msg["role"] == "user"),
            "Not specified"
        )
        
        conv_history = "\n".join(
            f"{msg['role'].upper()}: {msg['content']}" 
            for msg in request.conversation_history
        )
        
        # Generate report text
        prompt = PromptTemplate(
            input_variables=["chief_complaint", "history", "conversation_history"],
            template=REPORT_PROMPT
        )
        chain = LLMChain(llm=llm, prompt=prompt)
        report_text = await chain.arun(
            chief_complaint=chief_complaint,
            history="From conversation",
            conversation_history=conv_history
        )
        
        # Create PDF
        buffer = BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []
        
        story.append(Paragraph("Medical Consultation Report", styles['Title']))
        for paragraph in report_text.split('\n\n'):
            if paragraph.strip():
                story.append(Paragraph(paragraph.strip(), styles['Normal']))
        
        doc.build(story)
        buffer.seek(0)
        
        return StreamingResponse(
            buffer,
            media_type="application/pdf",
            headers={"Content-Disposition": "attachment; filename=medical_report.pdf"}
        )
        
    except Exception as e:
        logger.error(f"Report error: {str(e)}")
        raise HTTPException(500, "Report generation failed")












        from fastapi import FastAPI, HTTPException
from pydantic import BaseModel
from typing import List, Dict
from langchain_ollama import ChatOllama
from langchain.prompts import PromptTemplate
from langchain.chains import LLMChain
import logging

# Setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

# Initialize LLM
llm = ChatOllama(
    model="biomistral",
    temperature=0.7,
    max_tokens=2000,
    timeout=30
)

# Define request model
class JSONReportRequest(BaseModel):
    conversation_history: List[Dict[str, str]]
    age: str
    gender: str
    department: str

# Prompt template for generating JSON report
JSON_PROMPT = """
Generate a JSON report for patient assessment based on the following details:

- Age: {age}
- Gender: {gender}
- Department: {department}
- Conversation History:
{conversation_history}

The JSON should include:
1. A list of 5 health-related questions, each with 4 options and their respective EHR-specific terms.
2. Auto-flagging rules for high, medium, and low risk based on question responses.

Format the output as valid JSON.
"""

@app.post("/generate_json_report")
async def generate_json_report(request: JSONReportRequest):
    try:
        # Format conversation history as a string
        conversation_history = "\n".join(
            f"{msg['role'].capitalize()}: {msg['content']}" for msg in request.conversation_history
        )
        
        # Prompt preparation
        prompt = PromptTemplate(
            input_variables=["age", "gender", "department", "conversation_history"],
            template=JSON_PROMPT
        )
        
        chain = LLMChain(llm=llm, prompt=prompt)
        
        # Generate JSON report
        json_report = await chain.arun(
            age=request.age,
            gender=request.gender,
            department=request.department,
            conversation_history=conversation_history
        )
        
        return {"json_report": json_report.strip()}
    
    except Exception as e:
        logger.error(f"Error generating JSON report: {str(e)}")
        raise HTTPException(500, "Failed to generate JSON report")


        this is json_report_backend code  









        import React, { useState, useRef, useEffect } from 'react';
import './App.css';

function App() {
  const [input, setInput] = useState('');
  const [messages, setMessages] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [age, setAge] = useState('');
  const [gender, setGender] = useState('');
  const [department, setDepartment] = useState('');
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!input.trim()) return;

    const userMessage = { role: 'user', content: input };
    setMessages(prev => [...prev, userMessage]);
    setInput('');
    setIsLoading(true);

    try {
      const response = await fetch('http://localhost:8000/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          user_input: input,
          conversation_history: messages,
        }),
      });

      const data = await response.json();
      setMessages(prev => [...prev, { role: 'assistant', content: data.response }]);
    } catch (error) {
      console.error('Error:', error);
      setMessages(prev => [...prev, {
        role: 'assistant',
        content: "Sorry, I encountered an error. Please try again."
      }]);
    } finally {
      setIsLoading(false);
    }
  };

  const generateReport = async () => {
    if (messages.length === 0 || !age || !gender || !department) {
      alert("Please fill out all details in the side box before generating a report.");
      return;
    }

    setIsLoading(true);
    try {
      const response = await fetch('http://localhost:8000/generate_report', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          conversation_history: messages,
          age,
          gender,
          department,
        }),
      });

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'medical_report.pdf';
      document.body.appendChild(a);
      a.click();
      a.remove();
    } catch (error) {
      console.error('Report error:', error);
      alert('Failed to generate report');
    } finally {
      setIsLoading(false);
    }
  };

  const generateJSON = async () => {
    if (messages.length === 0 || !age || !gender || !department) {
      alert("Please fill out all details in the side box before generating a JSON file.");
      return;
    }

    setIsLoading(true);
    try {
      const response = await fetch('http://localhost:8000/generate_json_report', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          conversation_history: messages,
          age,
          gender,
          department,
        }),
      });

      const data = await response.json();
      const jsonString = `data:text/json;charset=utf-8,${encodeURIComponent(
        JSON.stringify(data.json_report, null, 2)
      )}`;
      const a = document.createElement('a');
      a.href = jsonString;
      a.download = 'patient_assessment.json';
      a.click();
    } catch (error) {
      console.error('JSON generation error:', error);
      alert('Failed to generate JSON file');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="app">
      <header className="header">
        <h1>Medical Chatbot</h1>
      </header>

      <div className="chat-container">
        <div className="chat-section">
          <div className="messages">
            {messages.length === 0 ? (
              <div className="welcome-message">
                <p>Describe your symptoms...</p>
              </div>
            ) : (
              messages.map((msg, index) => (
                <div key={index} className={`message ${msg.role}`}>
                  {msg.content}
                </div>
              ))
            )}
            <div ref={messagesEndRef} />
            {isLoading && <div className="message assistant typing">Typing...</div>}
          </div>

          <form onSubmit={handleSubmit} className="input-area">
            <input
              type="text"
              value={input}
              onChange={(e) => setInput(e.target.value)}
              placeholder="Type your symptoms..."
              disabled={isLoading}
            />
            <button type="submit" disabled={isLoading}>
              Send
            </button>
          </form>
        </div>

        <div className="side-box">
          <h2>Patient Details</h2>
          <label>
            Age:
            <input
              type="number"
              value={age}
              onChange={(e) => setAge(e.target.value)}
              placeholder="Enter your age"
            />
          </label>
          <label>
            Gender:
            <select value={gender} onChange={(e) => setGender(e.target.value)}>
              <option value="">Select Gender</option>
              <option value="Male">Male</option>
              <option value="Female">Female</option>
              <option value="Other">Other</option>
            </select>
          </label>
          <label>
            Problem Department:
            <input
              type="text"
              value={department}
              onChange={(e) => setDepartment(e.target.value)}
              placeholder="Enter department"
            />
          </label>
          <button
            onClick={generateReport}
            disabled={isLoading || !age || !gender || !department}
            className="report-btn"
          >
            Generate PDF Report
          </button>
          <button
            onClick={generateJSON}
            disabled={isLoading || !age || !gender || !department}
            className="json-btn"
          >
            Generate JSON File
          </button>
        </div>
      </div>
    </div>
  );
}

export default App;






















.chat-container {
  display: flex;
  flex-direction: row;
  gap: 1rem;
}

.chat-section {
  flex: 2;
  display: flex;
  flex-direction: column;
}

.messages {
  flex: 1;
  overflow-y: auto;
  padding: 1rem;
  margin-bottom: 1rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  background-color: #f9f9f9;
}

.input-area {
  display: flex;
  gap: 0.5rem;
  margin-top: 1rem;
}

.input-area input {
  flex: 1;
  padding: 0.8rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
}

.input-area button {
  padding: 0.8rem 1.5rem;
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
}

.side-box {
  flex: 1;
  background-color: #f9f9f9;
  padding: 1rem;
  border: 1px solid #ddd;
  border-radius: 4px;
}

.side-box h2 {
  margin-bottom: 1rem;
  color: #333;
}

.side-box label {
  display: block;
  margin-bottom: 1rem;
  font-size: 1rem;
  color: #555;
}

.side-box input, .side-box select {
  width: 100%;
  padding: 0.5rem;
  margin-top: 0.3rem;
  border: 1px solid #ddd;
  border-radius: 4px;
  font-size: 1rem;
}

.side-box button {
  width: 100%;
  padding: 0.8rem;
  margin-top: 1rem;
  background-color: #2196F3;
  color: white;
  border: none;
  border-radius: 4px;
  cursor: pointer;
  font-size: 1rem;
}